
Digital_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003114  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003248  08003248  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003248  08003248  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000054  080032a4  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080032a4  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad1c  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed8  00000000  00000000  0002ad99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0002d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183c7  00000000  00000000  0002e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0dc  00000000  00000000  00046967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa80  00000000  00000000  00054a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df4c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003498  00000000  00000000  000df514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08003208 	.word	0x08003208

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08003208 	.word	0x08003208

0800014c <getKeyInput>:
//	//if(KeyReg3 == PRESSED_STATE){
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//		//button1_flag = 1
//}

void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e091      	b.n	800027c <getKeyInput+0x130>
		  KeyReg2[i] = KeyReg1[i];
 8000158:	4a4d      	ldr	r2, [pc, #308]	; (8000290 <getKeyInput+0x144>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494c      	ldr	r1, [pc, #304]	; (8000294 <getKeyInput+0x148>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg1[i] = KeyReg0[i];
 8000168:	4a4b      	ldr	r2, [pc, #300]	; (8000298 <getKeyInput+0x14c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4947      	ldr	r1, [pc, #284]	; (8000290 <getKeyInput+0x144>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  switch (i){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d01f      	beq.n	80001be <getKeyInput+0x72>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b02      	cmp	r3, #2
 8000182:	dc26      	bgt.n	80001d2 <getKeyInput+0x86>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d003      	beq.n	8000192 <getKeyInput+0x46>
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d00b      	beq.n	80001a8 <getKeyInput+0x5c>
 8000190:	e01f      	b.n	80001d2 <getKeyInput+0x86>
		  case 0: // read data from Button 1
			  KeyReg0[i] = HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 8000192:	2101      	movs	r1, #1
 8000194:	4841      	ldr	r0, [pc, #260]	; (800029c <getKeyInput+0x150>)
 8000196:	f001 fec9 	bl	8001f2c <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a3e      	ldr	r2, [pc, #248]	; (8000298 <getKeyInput+0x14c>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
 80001a6:	e01a      	b.n	80001de <getKeyInput+0x92>
		  case 1: // read data from Button 2
			  KeyReg0[i] = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 80001a8:	2102      	movs	r1, #2
 80001aa:	483c      	ldr	r0, [pc, #240]	; (800029c <getKeyInput+0x150>)
 80001ac:	f001 febe 	bl	8001f2c <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a38      	ldr	r2, [pc, #224]	; (8000298 <getKeyInput+0x14c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
 80001bc:	e00f      	b.n	80001de <getKeyInput+0x92>
		  case 2: // read data from Button 3
			  KeyReg0[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80001be:	2110      	movs	r1, #16
 80001c0:	4836      	ldr	r0, [pc, #216]	; (800029c <getKeyInput+0x150>)
 80001c2:	f001 feb3 	bl	8001f2c <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a33      	ldr	r2, [pc, #204]	; (8000298 <getKeyInput+0x14c>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		  case 3: // read data from Button 4
//			  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_P_GPIO_Port, BUTTON_P_Pin);
//			  break;
		  default:
			  KeyReg0[i] = NORMAL_STATE;
 80001d2:	4a31      	ldr	r2, [pc, #196]	; (8000298 <getKeyInput+0x14c>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2101      	movs	r1, #1
 80001d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
 80001dc:	bf00      	nop
		  }

		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001de:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <getKeyInput+0x144>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e6:	492c      	ldr	r1, [pc, #176]	; (8000298 <getKeyInput+0x14c>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d141      	bne.n	8000276 <getKeyInput+0x12a>
 80001f2:	4a27      	ldr	r2, [pc, #156]	; (8000290 <getKeyInput+0x144>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	4926      	ldr	r1, [pc, #152]	; (8000294 <getKeyInput+0x148>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000202:	429a      	cmp	r2, r3
 8000204:	d137      	bne.n	8000276 <getKeyInput+0x12a>
			if (KeyReg2[i] != KeyReg3[i]){// nhan tha
 8000206:	4a23      	ldr	r2, [pc, #140]	; (8000294 <getKeyInput+0x148>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	4924      	ldr	r1, [pc, #144]	; (80002a0 <getKeyInput+0x154>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000216:	429a      	cmp	r2, r3
 8000218:	d019      	beq.n	800024e <getKeyInput+0x102>
			  KeyReg3[i] = KeyReg2[i];
 800021a:	4a1e      	ldr	r2, [pc, #120]	; (8000294 <getKeyInput+0x148>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	491f      	ldr	r1, [pc, #124]	; (80002a0 <getKeyInput+0x154>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg3[i] == PRESSED_STATE){
 800022a:	4a1d      	ldr	r2, [pc, #116]	; (80002a0 <getKeyInput+0x154>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d11f      	bne.n	8000276 <getKeyInput+0x12a>
				TimeOutForKeyPress[i] = 5000;
 8000236:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <getKeyInput+0x158>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f241 3188 	movw	r1, #5000	; 0x1388
 800023e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				//subKeyProcess();
				button_flag[i] = 1;
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <getKeyInput+0x15c>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2101      	movs	r1, #1
 8000248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800024c:	e013      	b.n	8000276 <getKeyInput+0x12a>
			  }
			}else{ // nhan de
			   TimeOutForKeyPress[i]--;
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <getKeyInput+0x158>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	1e5a      	subs	r2, r3, #1
 8000258:	4912      	ldr	r1, [pc, #72]	; (80002a4 <getKeyInput+0x158>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <getKeyInput+0x158>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d104      	bne.n	8000276 <getKeyInput+0x12a>
				  KeyReg3[i] = NORMAL_STATE;
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <getKeyInput+0x154>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2101      	movs	r1, #1
 8000272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_OF_BUTTON; i++){
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b02      	cmp	r3, #2
 8000280:	f77f af6a 	ble.w	8000158 <getKeyInput+0xc>
				}
			}
		  }
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	2000000c 	.word	0x2000000c
 8000294:	20000018 	.word	0x20000018
 8000298:	20000000 	.word	0x20000000
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000024 	.word	0x20000024
 80002a4:	20000030 	.word	0x20000030
 80002a8:	20000070 	.word	0x20000070

080002ac <restartDisplay>:
//int status_display = INIT;
int status_blink = INIT;
//int num_led = 0;
/* Function -----*/
//Set restart 7SEG display
void restartDisplay(int num_led) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  status_display = num_led;
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <restartDisplay+0x18>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	20000080 	.word	0x20000080

080002c8 <fsm_display>:
//7SEG LED display
void fsm_display(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  switch(status_display) {
 80002cc:	4bb2      	ldr	r3, [pc, #712]	; (8000598 <fsm_display+0x2d0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b0c      	cmp	r3, #12
 80002d2:	f200 814d 	bhi.w	8000570 <fsm_display+0x2a8>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_display+0x14>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	08000311 	.word	0x08000311
 80002e0:	0800032b 	.word	0x0800032b
 80002e4:	0800035b 	.word	0x0800035b
 80002e8:	0800038b 	.word	0x0800038b
 80002ec:	080003b7 	.word	0x080003b7
 80002f0:	080003e7 	.word	0x080003e7
 80002f4:	08000417 	.word	0x08000417
 80002f8:	08000447 	.word	0x08000447
 80002fc:	08000477 	.word	0x08000477
 8000300:	080004a7 	.word	0x080004a7
 8000304:	080004d5 	.word	0x080004d5
 8000308:	08000503 	.word	0x08000503
 800030c:	08000531 	.word	0x08000531
  case INIT:
		  display_analog_clock(num_led);
 8000310:	4ba2      	ldr	r3, [pc, #648]	; (800059c <fsm_display+0x2d4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb7b 	bl	8000a10 <display_analog_clock>
		  status_display = EN0;
 800031a:	4b9f      	ldr	r3, [pc, #636]	; (8000598 <fsm_display+0x2d0>)
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
		  setTimer1(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000324:	f001 f8e6 	bl	80014f4 <setTimer1>
		  break;
 8000328:	e13d      	b.n	80005a6 <fsm_display+0x2de>
  case EN0:
	  if(isTimerFlag1() == 1)
 800032a:	f001 f8bf 	bl	80014ac <isTimerFlag1>
 800032e:	4603      	mov	r3, r0
 8000330:	2b01      	cmp	r3, #1
 8000332:	f040 811f 	bne.w	8000574 <fsm_display+0x2ac>
	  {

//		  display_analog_clock(0);
		  num_led++;
 8000336:	4b99      	ldr	r3, [pc, #612]	; (800059c <fsm_display+0x2d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	4a97      	ldr	r2, [pc, #604]	; (800059c <fsm_display+0x2d4>)
 800033e:	6013      	str	r3, [r2, #0]
		  display_analog_clock(num_led);
 8000340:	4b96      	ldr	r3, [pc, #600]	; (800059c <fsm_display+0x2d4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fb63 	bl	8000a10 <display_analog_clock>
		  setTimer1(1000);
 800034a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800034e:	f001 f8d1 	bl	80014f4 <setTimer1>
		  status_display = EN1;
 8000352:	4b91      	ldr	r3, [pc, #580]	; (8000598 <fsm_display+0x2d0>)
 8000354:	2202      	movs	r2, #2
 8000356:	601a      	str	r2, [r3, #0]
	  }

//	    status_display = EN0;

    break;
 8000358:	e10c      	b.n	8000574 <fsm_display+0x2ac>
  case EN1:
	  if(isTimerFlag1() == 1)
 800035a:	f001 f8a7 	bl	80014ac <isTimerFlag1>
 800035e:	4603      	mov	r3, r0
 8000360:	2b01      	cmp	r3, #1
 8000362:	f040 8109 	bne.w	8000578 <fsm_display+0x2b0>
	  {

//		  display_analog_clock(0);
//		  display_analog_clock(1);
		  num_led++;
 8000366:	4b8d      	ldr	r3, [pc, #564]	; (800059c <fsm_display+0x2d4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	4a8b      	ldr	r2, [pc, #556]	; (800059c <fsm_display+0x2d4>)
 800036e:	6013      	str	r3, [r2, #0]
		  display_analog_clock(num_led);
 8000370:	4b8a      	ldr	r3, [pc, #552]	; (800059c <fsm_display+0x2d4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fb4b 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 800037a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037e:	f001 f8b9 	bl	80014f4 <setTimer1>
			  status_display = EN2;
 8000382:	4b85      	ldr	r3, [pc, #532]	; (8000598 <fsm_display+0x2d0>)
 8000384:	2203      	movs	r2, #3
 8000386:	601a      	str	r2, [r3, #0]
	  }

//	    status_display = EN0;

    break;
 8000388:	e0f6      	b.n	8000578 <fsm_display+0x2b0>
  case EN2:
	  if(isTimerFlag1() == 1)
 800038a:	f001 f88f 	bl	80014ac <isTimerFlag1>
 800038e:	4603      	mov	r3, r0
 8000390:	2b01      	cmp	r3, #1
 8000392:	d110      	bne.n	80003b6 <fsm_display+0xee>
	  {
		  num_led++;
 8000394:	4b81      	ldr	r3, [pc, #516]	; (800059c <fsm_display+0x2d4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3301      	adds	r3, #1
 800039a:	4a80      	ldr	r2, [pc, #512]	; (800059c <fsm_display+0x2d4>)
 800039c:	6013      	str	r3, [r2, #0]
		  status_display = EN3;
 800039e:	4b7e      	ldr	r3, [pc, #504]	; (8000598 <fsm_display+0x2d0>)
 80003a0:	2204      	movs	r2, #4
 80003a2:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 80003a4:	4b7d      	ldr	r3, [pc, #500]	; (800059c <fsm_display+0x2d4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fb31 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 80003ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b2:	f001 f89f 	bl	80014f4 <setTimer1>
	  }

  case EN3:
	  if(isTimerFlag1() == 1)
 80003b6:	f001 f879 	bl	80014ac <isTimerFlag1>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	f040 80dd 	bne.w	800057c <fsm_display+0x2b4>
	  {
		  num_led++;
 80003c2:	4b76      	ldr	r3, [pc, #472]	; (800059c <fsm_display+0x2d4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	4a74      	ldr	r2, [pc, #464]	; (800059c <fsm_display+0x2d4>)
 80003ca:	6013      	str	r3, [r2, #0]
		  status_display = EN4;
 80003cc:	4b72      	ldr	r3, [pc, #456]	; (8000598 <fsm_display+0x2d0>)
 80003ce:	2205      	movs	r2, #5
 80003d0:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 80003d2:	4b72      	ldr	r3, [pc, #456]	; (800059c <fsm_display+0x2d4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fb1a 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 80003dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e0:	f001 f888 	bl	80014f4 <setTimer1>
	  }
    break;
 80003e4:	e0ca      	b.n	800057c <fsm_display+0x2b4>
  case EN4:
	  if(isTimerFlag1() == 1)
 80003e6:	f001 f861 	bl	80014ac <isTimerFlag1>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	f040 80c7 	bne.w	8000580 <fsm_display+0x2b8>
	  {
		  num_led++;
 80003f2:	4b6a      	ldr	r3, [pc, #424]	; (800059c <fsm_display+0x2d4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	3301      	adds	r3, #1
 80003f8:	4a68      	ldr	r2, [pc, #416]	; (800059c <fsm_display+0x2d4>)
 80003fa:	6013      	str	r3, [r2, #0]
		  status_display = EN5;
 80003fc:	4b66      	ldr	r3, [pc, #408]	; (8000598 <fsm_display+0x2d0>)
 80003fe:	2206      	movs	r2, #6
 8000400:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 8000402:	4b66      	ldr	r3, [pc, #408]	; (800059c <fsm_display+0x2d4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fb02 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 800040c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000410:	f001 f870 	bl	80014f4 <setTimer1>
	  }
    break;
 8000414:	e0b4      	b.n	8000580 <fsm_display+0x2b8>
  case EN5:
	  if(isTimerFlag1() == 1)
 8000416:	f001 f849 	bl	80014ac <isTimerFlag1>
 800041a:	4603      	mov	r3, r0
 800041c:	2b01      	cmp	r3, #1
 800041e:	f040 80b1 	bne.w	8000584 <fsm_display+0x2bc>
	  {
		  num_led++;
 8000422:	4b5e      	ldr	r3, [pc, #376]	; (800059c <fsm_display+0x2d4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	4a5c      	ldr	r2, [pc, #368]	; (800059c <fsm_display+0x2d4>)
 800042a:	6013      	str	r3, [r2, #0]
		  status_display = EN6;
 800042c:	4b5a      	ldr	r3, [pc, #360]	; (8000598 <fsm_display+0x2d0>)
 800042e:	2207      	movs	r2, #7
 8000430:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 8000432:	4b5a      	ldr	r3, [pc, #360]	; (800059c <fsm_display+0x2d4>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f000 faea 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 800043c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000440:	f001 f858 	bl	80014f4 <setTimer1>
	  }
    break;
 8000444:	e09e      	b.n	8000584 <fsm_display+0x2bc>
  case EN6:
	  if(isTimerFlag1() == 1)
 8000446:	f001 f831 	bl	80014ac <isTimerFlag1>
 800044a:	4603      	mov	r3, r0
 800044c:	2b01      	cmp	r3, #1
 800044e:	f040 809b 	bne.w	8000588 <fsm_display+0x2c0>
	  {
		  num_led++;
 8000452:	4b52      	ldr	r3, [pc, #328]	; (800059c <fsm_display+0x2d4>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	4a50      	ldr	r2, [pc, #320]	; (800059c <fsm_display+0x2d4>)
 800045a:	6013      	str	r3, [r2, #0]
		  status_display = EN7;
 800045c:	4b4e      	ldr	r3, [pc, #312]	; (8000598 <fsm_display+0x2d0>)
 800045e:	2208      	movs	r2, #8
 8000460:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 8000462:	4b4e      	ldr	r3, [pc, #312]	; (800059c <fsm_display+0x2d4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fad2 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 800046c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000470:	f001 f840 	bl	80014f4 <setTimer1>
	  }
    break;
 8000474:	e088      	b.n	8000588 <fsm_display+0x2c0>
  case EN7:
	  if(isTimerFlag1() == 1)
 8000476:	f001 f819 	bl	80014ac <isTimerFlag1>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	f040 8085 	bne.w	800058c <fsm_display+0x2c4>
	  {
		  num_led++;
 8000482:	4b46      	ldr	r3, [pc, #280]	; (800059c <fsm_display+0x2d4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	4a44      	ldr	r2, [pc, #272]	; (800059c <fsm_display+0x2d4>)
 800048a:	6013      	str	r3, [r2, #0]
		  status_display = EN8;
 800048c:	4b42      	ldr	r3, [pc, #264]	; (8000598 <fsm_display+0x2d0>)
 800048e:	2209      	movs	r2, #9
 8000490:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 8000492:	4b42      	ldr	r3, [pc, #264]	; (800059c <fsm_display+0x2d4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	f000 faba 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 800049c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a0:	f001 f828 	bl	80014f4 <setTimer1>
	  }
    break;
 80004a4:	e072      	b.n	800058c <fsm_display+0x2c4>
  case EN8:
	  if(isTimerFlag1() == 1)
 80004a6:	f001 f801 	bl	80014ac <isTimerFlag1>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d16f      	bne.n	8000590 <fsm_display+0x2c8>
	  {
		  num_led++;
 80004b0:	4b3a      	ldr	r3, [pc, #232]	; (800059c <fsm_display+0x2d4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a39      	ldr	r2, [pc, #228]	; (800059c <fsm_display+0x2d4>)
 80004b8:	6013      	str	r3, [r2, #0]
		  status_display = EN9;
 80004ba:	4b37      	ldr	r3, [pc, #220]	; (8000598 <fsm_display+0x2d0>)
 80004bc:	220a      	movs	r2, #10
 80004be:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 80004c0:	4b36      	ldr	r3, [pc, #216]	; (800059c <fsm_display+0x2d4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 faa3 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 80004ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ce:	f001 f811 	bl	80014f4 <setTimer1>
	  }
    break;
 80004d2:	e05d      	b.n	8000590 <fsm_display+0x2c8>
  case EN9:
	  if(isTimerFlag1() == 1)
 80004d4:	f000 ffea 	bl	80014ac <isTimerFlag1>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d15a      	bne.n	8000594 <fsm_display+0x2cc>
	  {
		  num_led++;
 80004de:	4b2f      	ldr	r3, [pc, #188]	; (800059c <fsm_display+0x2d4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	4a2d      	ldr	r2, [pc, #180]	; (800059c <fsm_display+0x2d4>)
 80004e6:	6013      	str	r3, [r2, #0]
		  status_display = EN10;
 80004e8:	4b2b      	ldr	r3, [pc, #172]	; (8000598 <fsm_display+0x2d0>)
 80004ea:	220b      	movs	r2, #11
 80004ec:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <fsm_display+0x2d4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fa8c 	bl	8000a10 <display_analog_clock>
		   setTimer1(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 fffa 	bl	80014f4 <setTimer1>
	  }
    break;
 8000500:	e048      	b.n	8000594 <fsm_display+0x2cc>
  case EN10:
	  if(isTimerFlag1() == 1)
 8000502:	f000 ffd3 	bl	80014ac <isTimerFlag1>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d149      	bne.n	80005a0 <fsm_display+0x2d8>
	  {
		  num_led++;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <fsm_display+0x2d4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a22      	ldr	r2, [pc, #136]	; (800059c <fsm_display+0x2d4>)
 8000514:	6013      	str	r3, [r2, #0]
		  status_display = EN11;
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <fsm_display+0x2d0>)
 8000518:	220c      	movs	r2, #12
 800051a:	601a      	str	r2, [r3, #0]
		  display_analog_clock(num_led);
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <fsm_display+0x2d4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fa75 	bl	8000a10 <display_analog_clock>
//		  if(num_led > 11){
//			  num_led = 0;
//		  }

		   setTimer1(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f000 ffe3 	bl	80014f4 <setTimer1>
	  }
    break;
 800052e:	e037      	b.n	80005a0 <fsm_display+0x2d8>
  case EN11:
	  if(isTimerFlag1() == 1)
 8000530:	f000 ffbc 	bl	80014ac <isTimerFlag1>
 8000534:	4603      	mov	r3, r0
 8000536:	2b01      	cmp	r3, #1
 8000538:	d134      	bne.n	80005a4 <fsm_display+0x2dc>
	  {
		  num_led++;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <fsm_display+0x2d4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a16      	ldr	r2, [pc, #88]	; (800059c <fsm_display+0x2d4>)
 8000542:	6013      	str	r3, [r2, #0]
		  display_analog_clock(num_led);
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <fsm_display+0x2d4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fa61 	bl	8000a10 <display_analog_clock>
		  if(num_led > 11){
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <fsm_display+0x2d4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b0b      	cmp	r3, #11
 8000554:	dd07      	ble.n	8000566 <fsm_display+0x29e>
			  num_led = 0;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <fsm_display+0x2d4>)
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
			  restartDisplay(num_led);
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <fsm_display+0x2d4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fea3 	bl	80002ac <restartDisplay>
		  }

//		  status_display = INIT;

		   setTimer1(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 ffc3 	bl	80014f4 <setTimer1>
	  }
    break;
 800056e:	e019      	b.n	80005a4 <fsm_display+0x2dc>
  default:
//	  onAllClock();
	  break;
 8000570:	bf00      	nop
 8000572:	e018      	b.n	80005a6 <fsm_display+0x2de>
    break;
 8000574:	bf00      	nop
 8000576:	e016      	b.n	80005a6 <fsm_display+0x2de>
    break;
 8000578:	bf00      	nop
 800057a:	e014      	b.n	80005a6 <fsm_display+0x2de>
    break;
 800057c:	bf00      	nop
 800057e:	e012      	b.n	80005a6 <fsm_display+0x2de>
    break;
 8000580:	bf00      	nop
 8000582:	e010      	b.n	80005a6 <fsm_display+0x2de>
    break;
 8000584:	bf00      	nop
 8000586:	e00e      	b.n	80005a6 <fsm_display+0x2de>
    break;
 8000588:	bf00      	nop
 800058a:	e00c      	b.n	80005a6 <fsm_display+0x2de>
    break;
 800058c:	bf00      	nop
 800058e:	e00a      	b.n	80005a6 <fsm_display+0x2de>
    break;
 8000590:	bf00      	nop
 8000592:	e008      	b.n	80005a6 <fsm_display+0x2de>
    break;
 8000594:	bf00      	nop
 8000596:	e006      	b.n	80005a6 <fsm_display+0x2de>
 8000598:	20000080 	.word	0x20000080
 800059c:	20000084 	.word	0x20000084
    break;
 80005a0:	bf00      	nop
 80005a2:	e000      	b.n	80005a6 <fsm_display+0x2de>
    break;
 80005a4:	bf00      	nop
  }
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop

080005ac <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	switch (status_mode){
 80005b0:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <fsm_mode_run+0x124>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <fsm_mode_run+0x12>
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d01d      	beq.n	80005f8 <fsm_mode_run+0x4c>
 80005bc:	e07f      	b.n	80006be <fsm_mode_run+0x112>
	case INIT:
		fsm_display();
 80005be:	f7ff fe83 	bl	80002c8 <fsm_display>

		if (isButtonflag(but3) == 1){
 80005c2:	4b44      	ldr	r3, [pc, #272]	; (80006d4 <fsm_mode_run+0x128>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f88c 	bl	80006e4 <isButtonflag>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d178      	bne.n	80006c4 <fsm_mode_run+0x118>
			display_analog_clock(num_led);
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <fsm_mode_run+0x12c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa1a 	bl	8000a10 <display_analog_clock>
			status_mode = MODE1;
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <fsm_mode_run+0x124>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
			clearTimer1();
 80005e2:	f000 ff33 	bl	800144c <clearTimer1>
			clearTimer2();
 80005e6:	f000 ff41 	bl	800146c <clearTimer2>
			clearTimer3();
 80005ea:	f000 ff4f 	bl	800148c <clearTimer3>
//
//
			setTimer2(10000);
 80005ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80005f2:	f000 ff99 	bl	8001528 <setTimer2>
		}
//		status_display = num_led;

		break;
 80005f6:	e065      	b.n	80006c4 <fsm_mode_run+0x118>
	case MODE1:


		if (isButtonflag(but1) == 1){
 80005f8:	4b38      	ldr	r3, [pc, #224]	; (80006dc <fsm_mode_run+0x130>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f871 	bl	80006e4 <isButtonflag>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d118      	bne.n	800063a <fsm_mode_run+0x8e>
			num_led++;
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <fsm_mode_run+0x12c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a32      	ldr	r2, [pc, #200]	; (80006d8 <fsm_mode_run+0x12c>)
 8000610:	6013      	str	r3, [r2, #0]
			if(num_led > 11){
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <fsm_mode_run+0x12c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b0b      	cmp	r3, #11
 8000618:	dd02      	ble.n	8000620 <fsm_mode_run+0x74>
				num_led = 0;
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <fsm_mode_run+0x12c>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
			}
			display_analog_clock(num_led);
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <fsm_mode_run+0x12c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f9f3 	bl	8000a10 <display_analog_clock>


			clearTimer1();
 800062a:	f000 ff0f 	bl	800144c <clearTimer1>
			clearTimer2();
 800062e:	f000 ff1d 	bl	800146c <clearTimer2>
//			clearTimer3();
//			status_mode = MODE2;


			setTimer2(10000);
 8000632:	f242 7010 	movw	r0, #10000	; 0x2710
 8000636:	f000 ff77 	bl	8001528 <setTimer2>

		}
		if (isButtonflag(but2) == 1){
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <fsm_mode_run+0x134>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f850 	bl	80006e4 <isButtonflag>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d118      	bne.n	800067c <fsm_mode_run+0xd0>
			num_led--;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <fsm_mode_run+0x12c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3b01      	subs	r3, #1
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <fsm_mode_run+0x12c>)
 8000652:	6013      	str	r3, [r2, #0]
			if(num_led < 0){
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <fsm_mode_run+0x12c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	da02      	bge.n	8000662 <fsm_mode_run+0xb6>
				num_led = 11;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <fsm_mode_run+0x12c>)
 800065e:	220b      	movs	r2, #11
 8000660:	601a      	str	r2, [r3, #0]
			}
			display_analog_clock(num_led);
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <fsm_mode_run+0x12c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f9d2 	bl	8000a10 <display_analog_clock>
//			status_mode = MODE2;

			clearTimer1();
 800066c:	f000 feee 	bl	800144c <clearTimer1>
			clearTimer2();
 8000670:	f000 fefc 	bl	800146c <clearTimer2>
//			clearTimer3();
			//


		    setTimer2(10000);
 8000674:	f242 7010 	movw	r0, #10000	; 0x2710
 8000678:	f000 ff56 	bl	8001528 <setTimer2>



		}
		if(isButtonflag(but3) == 1){
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <fsm_mode_run+0x128>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f82f 	bl	80006e4 <isButtonflag>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10a      	bne.n	80006a2 <fsm_mode_run+0xf6>
			restartDisplay(num_led--);
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <fsm_mode_run+0x12c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	1e5a      	subs	r2, r3, #1
 8000692:	4911      	ldr	r1, [pc, #68]	; (80006d8 <fsm_mode_run+0x12c>)
 8000694:	600a      	str	r2, [r1, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fe08 	bl	80002ac <restartDisplay>
			status_mode = INIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <fsm_mode_run+0x124>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
		}
		if(isTimerFlag2()== 1){
 80006a2:	f000 ff15 	bl	80014d0 <isTimerFlag2>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10d      	bne.n	80006c8 <fsm_mode_run+0x11c>
			restartDisplay(num_led);
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <fsm_mode_run+0x12c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fdfb 	bl	80002ac <restartDisplay>
			status_mode = INIT;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <fsm_mode_run+0x124>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
		}
//		status_display = num_led;

		break;
 80006bc:	e004      	b.n	80006c8 <fsm_mode_run+0x11c>




	default:
		clearAllClock();
 80006be:	f000 fcef 	bl	80010a0 <clearAllClock>
		break;
 80006c2:	e002      	b.n	80006ca <fsm_mode_run+0x11e>
		break;
 80006c4:	bf00      	nop
 80006c6:	e000      	b.n	80006ca <fsm_mode_run+0x11e>
		break;
 80006c8:	bf00      	nop
	}


}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	20000040 	.word	0x20000040
 80006d8:	20000084 	.word	0x20000084
 80006dc:	20000088 	.word	0x20000088
 80006e0:	2000003c 	.word	0x2000003c

080006e4 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <isButtonflag+0x30>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d106      	bne.n	8000706 <isButtonflag+0x22>
		flagForButton[index] = 0;
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <isButtonflag+0x30>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
		return 1;
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <isButtonflag+0x24>
	}
	return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200000a0 	.word	0x200000a0

08000718 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d901      	bls.n	800072c <is_button_pressed+0x14>
 8000728:	2300      	movs	r3, #0
 800072a:	e007      	b.n	800073c <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4a06      	ldr	r2, [pc, #24]	; (8000748 <is_button_pressed+0x30>)
 8000730:	5cd3      	ldrb	r3, [r2, r3]
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf0c      	ite	eq
 8000736:	2301      	moveq	r3, #1
 8000738:	2300      	movne	r3, #0
 800073a:	b2db      	uxtb	r3, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2000008c 	.word	0x2000008c

0800074c <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d901      	bls.n	8000760 <is_button_pressed_3s+0x14>
 800075c:	23ff      	movs	r3, #255	; 0xff
 800075e:	e007      	b.n	8000770 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <is_button_pressed_3s+0x30>)
 8000764:	5cd3      	ldrb	r3, [r2, r3]
 8000766:	2b01      	cmp	r3, #1
 8000768:	bf0c      	ite	eq
 800076a:	2301      	moveq	r3, #1
 800076c:	2300      	movne	r3, #0
 800076e:	b2db      	uxtb	r3, r3
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	2000009c 	.word	0x2000009c

08000780 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
int counter10S = 0;
void fsm_for_input_processing(uint8_t index ){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4a63      	ldr	r2, [pc, #396]	; (800091c <fsm_for_input_processing+0x19c>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	2b02      	cmp	r3, #2
 8000792:	f000 808a 	beq.w	80008aa <fsm_for_input_processing+0x12a>
 8000796:	2b02      	cmp	r3, #2
 8000798:	f300 80bc 	bgt.w	8000914 <fsm_for_input_processing+0x194>
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <fsm_for_input_processing+0x26>
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d037      	beq.n	8000814 <fsm_for_input_processing+0x94>
					}
				}

			break ;
	}
}
 80007a4:	e0b6      	b.n	8000914 <fsm_for_input_processing+0x194>
			if( is_button_pressed(index)){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffb5 	bl	8000718 <is_button_pressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d011      	beq.n	80007d8 <fsm_for_input_processing+0x58>
				buttonState[index] = BUTTON_PRESSED ;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4a59      	ldr	r2, [pc, #356]	; (800091c <fsm_for_input_processing+0x19c>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4a58      	ldr	r2, [pc, #352]	; (8000920 <fsm_for_input_processing+0x1a0>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4a56      	ldr	r2, [pc, #344]	; (8000924 <fsm_for_input_processing+0x1a4>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4a55      	ldr	r2, [pc, #340]	; (8000928 <fsm_for_input_processing+0x1a8>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	54d1      	strb	r1, [r2, r3]
			break ;
 80007d6:	e09a      	b.n	800090e <fsm_for_input_processing+0x18e>
				if(timer4_flag==1 && status_mode != INIT){
 80007d8:	4b54      	ldr	r3, [pc, #336]	; (800092c <fsm_for_input_processing+0x1ac>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 8096 	bne.w	800090e <fsm_for_input_processing+0x18e>
 80007e2:	4b53      	ldr	r3, [pc, #332]	; (8000930 <fsm_for_input_processing+0x1b0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f000 8091 	beq.w	800090e <fsm_for_input_processing+0x18e>
					counter10S++;
 80007ec:	4b51      	ldr	r3, [pc, #324]	; (8000934 <fsm_for_input_processing+0x1b4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a50      	ldr	r2, [pc, #320]	; (8000934 <fsm_for_input_processing+0x1b4>)
 80007f4:	6013      	str	r3, [r2, #0]
					if(counter10S >= 30){
 80007f6:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <fsm_for_input_processing+0x1b4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b1d      	cmp	r3, #29
 80007fc:	dd05      	ble.n	800080a <fsm_for_input_processing+0x8a>
						counter10S = 0;
 80007fe:	4b4d      	ldr	r3, [pc, #308]	; (8000934 <fsm_for_input_processing+0x1b4>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
						status_mode = INIT;
 8000804:	4b4a      	ldr	r3, [pc, #296]	; (8000930 <fsm_for_input_processing+0x1b0>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
					setTimer4(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080e:	f000 febf 	bl	8001590 <setTimer4>
			break ;
 8000812:	e07c      	b.n	800090e <fsm_for_input_processing+0x18e>
			counter10S = 0;
 8000814:	4b47      	ldr	r3, [pc, #284]	; (8000934 <fsm_for_input_processing+0x1b4>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff7b 	bl	8000718 <is_button_pressed>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10d      	bne.n	8000844 <fsm_for_input_processing+0xc4>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4a3c      	ldr	r2, [pc, #240]	; (800091c <fsm_for_input_processing+0x19c>)
 800082c:	2100      	movs	r1, #0
 800082e:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4a3d      	ldr	r2, [pc, #244]	; (8000928 <fsm_for_input_processing+0x1a8>)
 8000834:	2100      	movs	r1, #0
 8000836:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4a39      	ldr	r2, [pc, #228]	; (8000920 <fsm_for_input_processing+0x1a0>)
 800083c:	2100      	movs	r1, #0
 800083e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000842:	e066      	b.n	8000912 <fsm_for_input_processing+0x192>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4a36      	ldr	r2, [pc, #216]	; (8000920 <fsm_for_input_processing+0x1a0>)
 8000848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000850:	d209      	bcs.n	8000866 <fsm_for_input_processing+0xe6>
						counterForButtonPress1s[index]++;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a32      	ldr	r2, [pc, #200]	; (8000920 <fsm_for_input_processing+0x1a0>)
 8000856:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800085a:	3201      	adds	r2, #1
 800085c:	b291      	uxth	r1, r2
 800085e:	4a30      	ldr	r2, [pc, #192]	; (8000920 <fsm_for_input_processing+0x1a0>)
 8000860:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000864:	e011      	b.n	800088a <fsm_for_input_processing+0x10a>
					flagForButtonPress1s[index] = 1;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <fsm_for_input_processing+0x1a4>)
 800086a:	2101      	movs	r1, #1
 800086c:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a2d      	ldr	r2, [pc, #180]	; (8000928 <fsm_for_input_processing+0x1a8>)
 8000872:	2101      	movs	r1, #1
 8000874:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <fsm_for_input_processing+0x1b8>)
 800087a:	2100      	movs	r1, #0
 800087c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4a27      	ldr	r2, [pc, #156]	; (8000920 <fsm_for_input_processing+0x1a0>)
 8000884:	2100      	movs	r1, #0
 8000886:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <is_button_pressed_3s>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d03c      	beq.n	8000912 <fsm_for_input_processing+0x192>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4a20      	ldr	r2, [pc, #128]	; (800091c <fsm_for_input_processing+0x19c>)
 800089c:	2102      	movs	r1, #2
 800089e:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a20      	ldr	r2, [pc, #128]	; (8000924 <fsm_for_input_processing+0x1a4>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	54d1      	strb	r1, [r2, r3]
			break ;
 80008a8:	e033      	b.n	8000912 <fsm_for_input_processing+0x192>
			counter10S = 0;
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <fsm_for_input_processing+0x1b4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
			if (! is_button_pressed(index)){
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff30 	bl	8000718 <is_button_pressed>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10d      	bne.n	80008da <fsm_for_input_processing+0x15a>
				buttonState[index] = BUTTON_RELEASED;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a16      	ldr	r2, [pc, #88]	; (800091c <fsm_for_input_processing+0x19c>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4a17      	ldr	r2, [pc, #92]	; (8000928 <fsm_for_input_processing+0x1a8>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <fsm_for_input_processing+0x1b8>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80008d8:	e01c      	b.n	8000914 <fsm_for_input_processing+0x194>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4a16      	ldr	r2, [pc, #88]	; (8000938 <fsm_for_input_processing+0x1b8>)
 80008de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e2:	2bc7      	cmp	r3, #199	; 0xc7
 80008e4:	d809      	bhi.n	80008fa <fsm_for_input_processing+0x17a>
							counterForButtonAfterPress1s[index]++;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <fsm_for_input_processing+0x1b8>)
 80008ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008ee:	3201      	adds	r2, #1
 80008f0:	b291      	uxth	r1, r2
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <fsm_for_input_processing+0x1b8>)
 80008f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80008f8:	e00c      	b.n	8000914 <fsm_for_input_processing+0x194>
						flagForButton[index] = 1;
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <fsm_for_input_processing+0x1a8>)
 80008fe:	2101      	movs	r1, #1
 8000900:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <fsm_for_input_processing+0x1b8>)
 8000906:	2100      	movs	r1, #0
 8000908:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 800090c:	e002      	b.n	8000914 <fsm_for_input_processing+0x194>
			break ;
 800090e:	bf00      	nop
 8000910:	e000      	b.n	8000914 <fsm_for_input_processing+0x194>
			break ;
 8000912:	bf00      	nop
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000b4 	.word	0x200000b4
 8000920:	200000a4 	.word	0x200000a4
 8000924:	2000009c 	.word	0x2000009c
 8000928:	200000a0 	.word	0x200000a0
 800092c:	20000158 	.word	0x20000158
 8000930:	2000007c 	.word	0x2000007c
 8000934:	200000b8 	.word	0x200000b8
 8000938:	200000ac 	.word	0x200000ac

0800093c <button_reading>:




void button_reading(void){
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e051      	b.n	80009ec <button_reading+0xb0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	492b      	ldr	r1, [pc, #172]	; (80009fc <button_reading+0xc0>)
 800094e:	5c89      	ldrb	r1, [r1, r2]
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <button_reading+0xc4>)
 8000952:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	492a      	ldr	r1, [pc, #168]	; (8000a04 <button_reading+0xc8>)
 800095a:	5c89      	ldrb	r1, [r1, r2]
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <button_reading+0xc0>)
 800095e:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d01a      	beq.n	800099c <button_reading+0x60>
 8000966:	2b02      	cmp	r3, #2
 8000968:	dc22      	bgt.n	80009b0 <button_reading+0x74>
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <button_reading+0x38>
 800096e:	2b01      	cmp	r3, #1
 8000970:	d00a      	beq.n	8000988 <button_reading+0x4c>
			  break;
//		  case 3: // read data from Button 1
//			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_P_GPIO_Port, BUTTON_P_Pin);
//			  break;
		  default:
			  break;
 8000972:	e01d      	b.n	80009b0 <button_reading+0x74>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 8000974:	79fc      	ldrb	r4, [r7, #7]
 8000976:	2101      	movs	r1, #1
 8000978:	4823      	ldr	r0, [pc, #140]	; (8000a08 <button_reading+0xcc>)
 800097a:	f001 fad7 	bl	8001f2c <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <button_reading+0xc8>)
 8000984:	551a      	strb	r2, [r3, r4]
			  break;
 8000986:	e014      	b.n	80009b2 <button_reading+0x76>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 8000988:	79fc      	ldrb	r4, [r7, #7]
 800098a:	2102      	movs	r1, #2
 800098c:	481e      	ldr	r0, [pc, #120]	; (8000a08 <button_reading+0xcc>)
 800098e:	f001 facd 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <button_reading+0xc8>)
 8000998:	551a      	strb	r2, [r3, r4]
			  break;
 800099a:	e00a      	b.n	80009b2 <button_reading+0x76>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 800099c:	79fc      	ldrb	r4, [r7, #7]
 800099e:	2110      	movs	r1, #16
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <button_reading+0xcc>)
 80009a2:	f001 fac3 	bl	8001f2c <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <button_reading+0xc8>)
 80009ac:	551a      	strb	r2, [r3, r4]
			  break;
 80009ae:	e000      	b.n	80009b2 <button_reading+0x76>
			  break;
 80009b0:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <button_reading+0xc8>)
 80009b6:	5cd2      	ldrb	r2, [r2, r3]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4910      	ldr	r1, [pc, #64]	; (80009fc <button_reading+0xc0>)
 80009bc:	5ccb      	ldrb	r3, [r1, r3]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d111      	bne.n	80009e6 <button_reading+0xaa>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <button_reading+0xc0>)
 80009c6:	5cd2      	ldrb	r2, [r2, r3]
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <button_reading+0xc4>)
 80009cc:	5ccb      	ldrb	r3, [r1, r3]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d109      	bne.n	80009e6 <button_reading+0xaa>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	490a      	ldr	r1, [pc, #40]	; (8000a00 <button_reading+0xc4>)
 80009d8:	5c89      	ldrb	r1, [r1, r2]
 80009da:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <button_reading+0xd0>)
 80009dc:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fecd 	bl	8000780 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	3301      	adds	r3, #1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d9aa      	bls.n	8000948 <button_reading+0xc>
		  }

	}
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000094 	.word	0x20000094
 8000a00:	20000098 	.word	0x20000098
 8000a04:	20000090 	.word	0x20000090
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	2000008c 	.word	0x2000008c

08000a10 <display_analog_clock>:
#include "led_display.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"

void display_analog_clock(int num){ // This funtion gets from Exercise 6 for testing
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	switch(num){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b0b      	cmp	r3, #11
 8000a1c:	f200 8338 	bhi.w	8001090 <display_analog_clock+0x680>
 8000a20:	a201      	add	r2, pc, #4	; (adr r2, 8000a28 <display_analog_clock+0x18>)
 8000a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a26:	bf00      	nop
 8000a28:	08000a59 	.word	0x08000a59
 8000a2c:	08000add 	.word	0x08000add
 8000a30:	08000b61 	.word	0x08000b61
 8000a34:	08000be5 	.word	0x08000be5
 8000a38:	08000c69 	.word	0x08000c69
 8000a3c:	08000ced 	.word	0x08000ced
 8000a40:	08000d79 	.word	0x08000d79
 8000a44:	08000dfd 	.word	0x08000dfd
 8000a48:	08000e81 	.word	0x08000e81
 8000a4c:	08000f05 	.word	0x08000f05
 8000a50:	08000f89 	.word	0x08000f89
 8000a54:	0800100d 	.word	0x0800100d
		case 0 :{ // Turn on LED 0
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	48c4      	ldr	r0, [pc, #784]	; (8000d70 <display_analog_clock+0x360>)
 8000a60:	f001 fa7b 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	48c2      	ldr	r0, [pc, #776]	; (8000d74 <display_analog_clock+0x364>)
 8000a6a:	f001 fa76 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2120      	movs	r1, #32
 8000a72:	48c0      	ldr	r0, [pc, #768]	; (8000d74 <display_analog_clock+0x364>)
 8000a74:	f001 fa71 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	48bd      	ldr	r0, [pc, #756]	; (8000d74 <display_analog_clock+0x364>)
 8000a7e:	f001 fa6c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a88:	48b9      	ldr	r0, [pc, #740]	; (8000d70 <display_analog_clock+0x360>)
 8000a8a:	f001 fa66 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a94:	48b6      	ldr	r0, [pc, #728]	; (8000d70 <display_analog_clock+0x360>)
 8000a96:	f001 fa60 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	48b5      	ldr	r0, [pc, #724]	; (8000d74 <display_analog_clock+0x364>)
 8000aa0:	f001 fa5b 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	48b1      	ldr	r0, [pc, #708]	; (8000d70 <display_analog_clock+0x360>)
 8000aaa:	f001 fa56 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	48af      	ldr	r0, [pc, #700]	; (8000d70 <display_analog_clock+0x360>)
 8000ab4:	f001 fa51 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2120      	movs	r1, #32
 8000abc:	48ac      	ldr	r0, [pc, #688]	; (8000d70 <display_analog_clock+0x360>)
 8000abe:	f001 fa4c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	48aa      	ldr	r0, [pc, #680]	; (8000d74 <display_analog_clock+0x364>)
 8000aca:	f001 fa46 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad4:	48a7      	ldr	r0, [pc, #668]	; (8000d74 <display_analog_clock+0x364>)
 8000ad6:	f001 fa40 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000ada:	e2d9      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 1 :{ // Turn on LED 1
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	48a3      	ldr	r0, [pc, #652]	; (8000d70 <display_analog_clock+0x360>)
 8000ae4:	f001 fa39 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2108      	movs	r1, #8
 8000aec:	48a1      	ldr	r0, [pc, #644]	; (8000d74 <display_analog_clock+0x364>)
 8000aee:	f001 fa34 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2120      	movs	r1, #32
 8000af6:	489f      	ldr	r0, [pc, #636]	; (8000d74 <display_analog_clock+0x364>)
 8000af8:	f001 fa2f 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2110      	movs	r1, #16
 8000b00:	489c      	ldr	r0, [pc, #624]	; (8000d74 <display_analog_clock+0x364>)
 8000b02:	f001 fa2a 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0c:	4898      	ldr	r0, [pc, #608]	; (8000d70 <display_analog_clock+0x360>)
 8000b0e:	f001 fa24 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4895      	ldr	r0, [pc, #596]	; (8000d70 <display_analog_clock+0x360>)
 8000b1a:	f001 fa1e 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4894      	ldr	r0, [pc, #592]	; (8000d74 <display_analog_clock+0x364>)
 8000b24:	f001 fa19 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	4890      	ldr	r0, [pc, #576]	; (8000d70 <display_analog_clock+0x360>)
 8000b2e:	f001 fa14 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	488e      	ldr	r0, [pc, #568]	; (8000d70 <display_analog_clock+0x360>)
 8000b38:	f001 fa0f 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2120      	movs	r1, #32
 8000b40:	488b      	ldr	r0, [pc, #556]	; (8000d70 <display_analog_clock+0x360>)
 8000b42:	f001 fa0a 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	4889      	ldr	r0, [pc, #548]	; (8000d74 <display_analog_clock+0x364>)
 8000b4e:	f001 fa04 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	4886      	ldr	r0, [pc, #536]	; (8000d74 <display_analog_clock+0x364>)
 8000b5a:	f001 f9fe 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000b5e:	e297      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 2 :{ // Turn on LED 2
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	4882      	ldr	r0, [pc, #520]	; (8000d70 <display_analog_clock+0x360>)
 8000b68:	f001 f9f7 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2108      	movs	r1, #8
 8000b70:	4880      	ldr	r0, [pc, #512]	; (8000d74 <display_analog_clock+0x364>)
 8000b72:	f001 f9f2 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	487e      	ldr	r0, [pc, #504]	; (8000d74 <display_analog_clock+0x364>)
 8000b7c:	f001 f9ed 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2110      	movs	r1, #16
 8000b84:	487b      	ldr	r0, [pc, #492]	; (8000d74 <display_analog_clock+0x364>)
 8000b86:	f001 f9e8 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b90:	4877      	ldr	r0, [pc, #476]	; (8000d70 <display_analog_clock+0x360>)
 8000b92:	f001 f9e2 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9c:	4874      	ldr	r0, [pc, #464]	; (8000d70 <display_analog_clock+0x360>)
 8000b9e:	f001 f9dc 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	4873      	ldr	r0, [pc, #460]	; (8000d74 <display_analog_clock+0x364>)
 8000ba8:	f001 f9d7 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	486f      	ldr	r0, [pc, #444]	; (8000d70 <display_analog_clock+0x360>)
 8000bb2:	f001 f9d2 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	486d      	ldr	r0, [pc, #436]	; (8000d70 <display_analog_clock+0x360>)
 8000bbc:	f001 f9cd 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	486a      	ldr	r0, [pc, #424]	; (8000d70 <display_analog_clock+0x360>)
 8000bc6:	f001 f9c8 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd0:	4868      	ldr	r0, [pc, #416]	; (8000d74 <display_analog_clock+0x364>)
 8000bd2:	f001 f9c2 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	4865      	ldr	r0, [pc, #404]	; (8000d74 <display_analog_clock+0x364>)
 8000bde:	f001 f9bc 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000be2:	e255      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 3 :{ // Turn on LED 3
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	4861      	ldr	r0, [pc, #388]	; (8000d70 <display_analog_clock+0x360>)
 8000bec:	f001 f9b5 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	485f      	ldr	r0, [pc, #380]	; (8000d74 <display_analog_clock+0x364>)
 8000bf6:	f001 f9b0 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	485d      	ldr	r0, [pc, #372]	; (8000d74 <display_analog_clock+0x364>)
 8000c00:	f001 f9ab 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	485a      	ldr	r0, [pc, #360]	; (8000d74 <display_analog_clock+0x364>)
 8000c0a:	f001 f9a6 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c14:	4856      	ldr	r0, [pc, #344]	; (8000d70 <display_analog_clock+0x360>)
 8000c16:	f001 f9a0 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	4853      	ldr	r0, [pc, #332]	; (8000d70 <display_analog_clock+0x360>)
 8000c22:	f001 f99a 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	4852      	ldr	r0, [pc, #328]	; (8000d74 <display_analog_clock+0x364>)
 8000c2c:	f001 f995 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	484e      	ldr	r0, [pc, #312]	; (8000d70 <display_analog_clock+0x360>)
 8000c36:	f001 f990 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	484c      	ldr	r0, [pc, #304]	; (8000d70 <display_analog_clock+0x360>)
 8000c40:	f001 f98b 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2120      	movs	r1, #32
 8000c48:	4849      	ldr	r0, [pc, #292]	; (8000d70 <display_analog_clock+0x360>)
 8000c4a:	f001 f986 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c54:	4847      	ldr	r0, [pc, #284]	; (8000d74 <display_analog_clock+0x364>)
 8000c56:	f001 f980 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	4844      	ldr	r0, [pc, #272]	; (8000d74 <display_analog_clock+0x364>)
 8000c62:	f001 f97a 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000c66:	e213      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 4 :{ // Turn on LED 4
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6e:	4840      	ldr	r0, [pc, #256]	; (8000d70 <display_analog_clock+0x360>)
 8000c70:	f001 f973 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2108      	movs	r1, #8
 8000c78:	483e      	ldr	r0, [pc, #248]	; (8000d74 <display_analog_clock+0x364>)
 8000c7a:	f001 f96e 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2120      	movs	r1, #32
 8000c82:	483c      	ldr	r0, [pc, #240]	; (8000d74 <display_analog_clock+0x364>)
 8000c84:	f001 f969 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4839      	ldr	r0, [pc, #228]	; (8000d74 <display_analog_clock+0x364>)
 8000c8e:	f001 f964 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	4835      	ldr	r0, [pc, #212]	; (8000d70 <display_analog_clock+0x360>)
 8000c9a:	f001 f95e 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	4832      	ldr	r0, [pc, #200]	; (8000d70 <display_analog_clock+0x360>)
 8000ca6:	f001 f958 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	4831      	ldr	r0, [pc, #196]	; (8000d74 <display_analog_clock+0x364>)
 8000cb0:	f001 f953 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	482d      	ldr	r0, [pc, #180]	; (8000d70 <display_analog_clock+0x360>)
 8000cba:	f001 f94e 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	482b      	ldr	r0, [pc, #172]	; (8000d70 <display_analog_clock+0x360>)
 8000cc4:	f001 f949 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4828      	ldr	r0, [pc, #160]	; (8000d70 <display_analog_clock+0x360>)
 8000cce:	f001 f944 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd8:	4826      	ldr	r0, [pc, #152]	; (8000d74 <display_analog_clock+0x364>)
 8000cda:	f001 f93e 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce4:	4823      	ldr	r0, [pc, #140]	; (8000d74 <display_analog_clock+0x364>)
 8000ce6:	f001 f938 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000cea:	e1d1      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 5 :{ // Turn on LED 5
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf2:	481f      	ldr	r0, [pc, #124]	; (8000d70 <display_analog_clock+0x360>)
 8000cf4:	f001 f931 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	481d      	ldr	r0, [pc, #116]	; (8000d74 <display_analog_clock+0x364>)
 8000cfe:	f001 f92c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2120      	movs	r1, #32
 8000d06:	481b      	ldr	r0, [pc, #108]	; (8000d74 <display_analog_clock+0x364>)
 8000d08:	f001 f927 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	4818      	ldr	r0, [pc, #96]	; (8000d74 <display_analog_clock+0x364>)
 8000d12:	f001 f922 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1c:	4814      	ldr	r0, [pc, #80]	; (8000d70 <display_analog_clock+0x360>)
 8000d1e:	f001 f91c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <display_analog_clock+0x360>)
 8000d2a:	f001 f916 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	4810      	ldr	r0, [pc, #64]	; (8000d74 <display_analog_clock+0x364>)
 8000d34:	f001 f911 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <display_analog_clock+0x360>)
 8000d3e:	f001 f90c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <display_analog_clock+0x360>)
 8000d48:	f001 f907 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <display_analog_clock+0x360>)
 8000d52:	f001 f902 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <display_analog_clock+0x364>)
 8000d5e:	f001 f8fc 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <display_analog_clock+0x364>)
 8000d6a:	f001 f8f6 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000d6e:	e18f      	b.n	8001090 <display_analog_clock+0x680>
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00
		}
		case 6 :{ // Turn on LED 6
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7e:	48c6      	ldr	r0, [pc, #792]	; (8001098 <display_analog_clock+0x688>)
 8000d80:	f001 f8eb 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2108      	movs	r1, #8
 8000d88:	48c4      	ldr	r0, [pc, #784]	; (800109c <display_analog_clock+0x68c>)
 8000d8a:	f001 f8e6 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2120      	movs	r1, #32
 8000d92:	48c2      	ldr	r0, [pc, #776]	; (800109c <display_analog_clock+0x68c>)
 8000d94:	f001 f8e1 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	48bf      	ldr	r0, [pc, #764]	; (800109c <display_analog_clock+0x68c>)
 8000d9e:	f001 f8dc 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da8:	48bb      	ldr	r0, [pc, #748]	; (8001098 <display_analog_clock+0x688>)
 8000daa:	f001 f8d6 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db4:	48b8      	ldr	r0, [pc, #736]	; (8001098 <display_analog_clock+0x688>)
 8000db6:	f001 f8d0 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	48b7      	ldr	r0, [pc, #732]	; (800109c <display_analog_clock+0x68c>)
 8000dc0:	f001 f8cb 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	48b3      	ldr	r0, [pc, #716]	; (8001098 <display_analog_clock+0x688>)
 8000dca:	f001 f8c6 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	48b1      	ldr	r0, [pc, #708]	; (8001098 <display_analog_clock+0x688>)
 8000dd4:	f001 f8c1 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2120      	movs	r1, #32
 8000ddc:	48ae      	ldr	r0, [pc, #696]	; (8001098 <display_analog_clock+0x688>)
 8000dde:	f001 f8bc 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	48ac      	ldr	r0, [pc, #688]	; (800109c <display_analog_clock+0x68c>)
 8000dea:	f001 f8b6 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df4:	48a9      	ldr	r0, [pc, #676]	; (800109c <display_analog_clock+0x68c>)
 8000df6:	f001 f8b0 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000dfa:	e149      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 7 :{ // Turn on LED 7
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e02:	48a5      	ldr	r0, [pc, #660]	; (8001098 <display_analog_clock+0x688>)
 8000e04:	f001 f8a9 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	48a3      	ldr	r0, [pc, #652]	; (800109c <display_analog_clock+0x68c>)
 8000e0e:	f001 f8a4 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2120      	movs	r1, #32
 8000e16:	48a1      	ldr	r0, [pc, #644]	; (800109c <display_analog_clock+0x68c>)
 8000e18:	f001 f89f 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2110      	movs	r1, #16
 8000e20:	489e      	ldr	r0, [pc, #632]	; (800109c <display_analog_clock+0x68c>)
 8000e22:	f001 f89a 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2c:	489a      	ldr	r0, [pc, #616]	; (8001098 <display_analog_clock+0x688>)
 8000e2e:	f001 f894 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e38:	4897      	ldr	r0, [pc, #604]	; (8001098 <display_analog_clock+0x688>)
 8000e3a:	f001 f88e 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2140      	movs	r1, #64	; 0x40
 8000e42:	4896      	ldr	r0, [pc, #600]	; (800109c <display_analog_clock+0x68c>)
 8000e44:	f001 f889 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	4892      	ldr	r0, [pc, #584]	; (8001098 <display_analog_clock+0x688>)
 8000e4e:	f001 f884 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	4890      	ldr	r0, [pc, #576]	; (8001098 <display_analog_clock+0x688>)
 8000e58:	f001 f87f 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2120      	movs	r1, #32
 8000e60:	488d      	ldr	r0, [pc, #564]	; (8001098 <display_analog_clock+0x688>)
 8000e62:	f001 f87a 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6c:	488b      	ldr	r0, [pc, #556]	; (800109c <display_analog_clock+0x68c>)
 8000e6e:	f001 f874 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e78:	4888      	ldr	r0, [pc, #544]	; (800109c <display_analog_clock+0x68c>)
 8000e7a:	f001 f86e 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000e7e:	e107      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 8 :{ // Turn on LED 8
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	4884      	ldr	r0, [pc, #528]	; (8001098 <display_analog_clock+0x688>)
 8000e88:	f001 f867 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2108      	movs	r1, #8
 8000e90:	4882      	ldr	r0, [pc, #520]	; (800109c <display_analog_clock+0x68c>)
 8000e92:	f001 f862 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4880      	ldr	r0, [pc, #512]	; (800109c <display_analog_clock+0x68c>)
 8000e9c:	f001 f85d 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	487d      	ldr	r0, [pc, #500]	; (800109c <display_analog_clock+0x68c>)
 8000ea6:	f001 f858 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb0:	4879      	ldr	r0, [pc, #484]	; (8001098 <display_analog_clock+0x688>)
 8000eb2:	f001 f852 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	4876      	ldr	r0, [pc, #472]	; (8001098 <display_analog_clock+0x688>)
 8000ebe:	f001 f84c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4875      	ldr	r0, [pc, #468]	; (800109c <display_analog_clock+0x68c>)
 8000ec8:	f001 f847 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	4871      	ldr	r0, [pc, #452]	; (8001098 <display_analog_clock+0x688>)
 8000ed2:	f001 f842 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	486f      	ldr	r0, [pc, #444]	; (8001098 <display_analog_clock+0x688>)
 8000edc:	f001 f83d 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	486c      	ldr	r0, [pc, #432]	; (8001098 <display_analog_clock+0x688>)
 8000ee6:	f001 f838 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	486a      	ldr	r0, [pc, #424]	; (800109c <display_analog_clock+0x68c>)
 8000ef2:	f001 f832 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	4867      	ldr	r0, [pc, #412]	; (800109c <display_analog_clock+0x68c>)
 8000efe:	f001 f82c 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000f02:	e0c5      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 9 :{ // Turn on LED 9
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	4863      	ldr	r0, [pc, #396]	; (8001098 <display_analog_clock+0x688>)
 8000f0c:	f001 f825 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2108      	movs	r1, #8
 8000f14:	4861      	ldr	r0, [pc, #388]	; (800109c <display_analog_clock+0x68c>)
 8000f16:	f001 f820 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	485f      	ldr	r0, [pc, #380]	; (800109c <display_analog_clock+0x68c>)
 8000f20:	f001 f81b 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	485c      	ldr	r0, [pc, #368]	; (800109c <display_analog_clock+0x68c>)
 8000f2a:	f001 f816 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f34:	4858      	ldr	r0, [pc, #352]	; (8001098 <display_analog_clock+0x688>)
 8000f36:	f001 f810 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f40:	4855      	ldr	r0, [pc, #340]	; (8001098 <display_analog_clock+0x688>)
 8000f42:	f001 f80a 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	4854      	ldr	r0, [pc, #336]	; (800109c <display_analog_clock+0x68c>)
 8000f4c:	f001 f805 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	4850      	ldr	r0, [pc, #320]	; (8001098 <display_analog_clock+0x688>)
 8000f56:	f001 f800 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	484e      	ldr	r0, [pc, #312]	; (8001098 <display_analog_clock+0x688>)
 8000f60:	f000 fffb 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2120      	movs	r1, #32
 8000f68:	484b      	ldr	r0, [pc, #300]	; (8001098 <display_analog_clock+0x688>)
 8000f6a:	f000 fff6 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f74:	4849      	ldr	r0, [pc, #292]	; (800109c <display_analog_clock+0x68c>)
 8000f76:	f000 fff0 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f80:	4846      	ldr	r0, [pc, #280]	; (800109c <display_analog_clock+0x68c>)
 8000f82:	f000 ffea 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 8000f86:	e083      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 10 :{ // Turn on LED 10
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4842      	ldr	r0, [pc, #264]	; (8001098 <display_analog_clock+0x688>)
 8000f90:	f000 ffe3 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4840      	ldr	r0, [pc, #256]	; (800109c <display_analog_clock+0x68c>)
 8000f9a:	f000 ffde 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	483e      	ldr	r0, [pc, #248]	; (800109c <display_analog_clock+0x68c>)
 8000fa4:	f000 ffd9 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2110      	movs	r1, #16
 8000fac:	483b      	ldr	r0, [pc, #236]	; (800109c <display_analog_clock+0x68c>)
 8000fae:	f000 ffd4 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	4837      	ldr	r0, [pc, #220]	; (8001098 <display_analog_clock+0x688>)
 8000fba:	f000 ffce 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	4834      	ldr	r0, [pc, #208]	; (8001098 <display_analog_clock+0x688>)
 8000fc6:	f000 ffc8 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2140      	movs	r1, #64	; 0x40
 8000fce:	4833      	ldr	r0, [pc, #204]	; (800109c <display_analog_clock+0x68c>)
 8000fd0:	f000 ffc3 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	482f      	ldr	r0, [pc, #188]	; (8001098 <display_analog_clock+0x688>)
 8000fda:	f000 ffbe 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	482d      	ldr	r0, [pc, #180]	; (8001098 <display_analog_clock+0x688>)
 8000fe4:	f000 ffb9 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2120      	movs	r1, #32
 8000fec:	482a      	ldr	r0, [pc, #168]	; (8001098 <display_analog_clock+0x688>)
 8000fee:	f000 ffb4 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff8:	4828      	ldr	r0, [pc, #160]	; (800109c <display_analog_clock+0x68c>)
 8000ffa:	f000 ffae 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	4825      	ldr	r0, [pc, #148]	; (800109c <display_analog_clock+0x68c>)
 8001006:	f000 ffa8 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 800100a:	e041      	b.n	8001090 <display_analog_clock+0x680>
		}
		case 11 :{ // Turn on LED 11
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	4821      	ldr	r0, [pc, #132]	; (8001098 <display_analog_clock+0x688>)
 8001014:	f000 ffa1 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2108      	movs	r1, #8
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <display_analog_clock+0x68c>)
 800101e:	f000 ff9c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2120      	movs	r1, #32
 8001026:	481d      	ldr	r0, [pc, #116]	; (800109c <display_analog_clock+0x68c>)
 8001028:	f000 ff97 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2110      	movs	r1, #16
 8001030:	481a      	ldr	r0, [pc, #104]	; (800109c <display_analog_clock+0x68c>)
 8001032:	f000 ff92 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <display_analog_clock+0x688>)
 800103e:	f000 ff8c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <display_analog_clock+0x688>)
 800104a:	f000 ff86 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	4812      	ldr	r0, [pc, #72]	; (800109c <display_analog_clock+0x68c>)
 8001054:	f000 ff81 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <display_analog_clock+0x688>)
 800105e:	f000 ff7c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2140      	movs	r1, #64	; 0x40
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <display_analog_clock+0x688>)
 8001068:	f000 ff77 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2120      	movs	r1, #32
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <display_analog_clock+0x688>)
 8001072:	f000 ff72 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <display_analog_clock+0x68c>)
 800107e:	f000 ff6c 	bl	8001f5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <display_analog_clock+0x68c>)
 800108a:	f000 ff66 	bl	8001f5a <HAL_GPIO_WritePin>
			break;
 800108e:	bf00      	nop
		}
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00

080010a0 <clearAllClock>:


void clearAllClock(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	4820      	ldr	r0, [pc, #128]	; (800112c <clearAllClock+0x8c>)
 80010ac:	f000 ff55 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2108      	movs	r1, #8
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <clearAllClock+0x90>)
 80010b6:	f000 ff50 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2120      	movs	r1, #32
 80010be:	481c      	ldr	r0, [pc, #112]	; (8001130 <clearAllClock+0x90>)
 80010c0:	f000 ff4b 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <clearAllClock+0x90>)
 80010ca:	f000 ff46 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <clearAllClock+0x8c>)
 80010d6:	f000 ff40 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <clearAllClock+0x8c>)
 80010e2:	f000 ff3a 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <clearAllClock+0x90>)
 80010ec:	f000 ff35 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <clearAllClock+0x8c>)
 80010f6:	f000 ff30 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <clearAllClock+0x8c>)
 8001100:	f000 ff2b 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2120      	movs	r1, #32
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <clearAllClock+0x8c>)
 800110a:	f000 ff26 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <clearAllClock+0x90>)
 8001116:	f000 ff20 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <clearAllClock+0x90>)
 8001122:	f000 ff1a 	bl	8001f5a <HAL_GPIO_WritePin>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40010800 	.word	0x40010800
 8001130:	40010c00 	.word	0x40010c00

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fc04 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f826 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f8dc 	bl	80012fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001144:	f000 f8b0 	bl	80012a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001148:	f000 f862 	bl	8001210 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <main+0x54>)
 800114e:	f001 fba9 	bl	80028a4 <HAL_TIM_Base_Start_IT>

//  status_mode = INIT;

  setTimer1(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001156:	f000 f9cd 	bl	80014f4 <setTimer1>
  setTimer2(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f000 f9e3 	bl	8001528 <setTimer2>
  setTimer3(1000);
 8001162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001166:	f000 f9f9 	bl	800155c <setTimer3>
  setTimer4(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f000 fa0f 	bl	8001590 <setTimer4>
  setTimer5(1000);
 8001172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001176:	f000 fa25 	bl	80015c4 <setTimer5>
  setTimer6(1000);
 800117a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117e:	f000 fa3b 	bl	80015f8 <setTimer6>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  onAllClock();
//	  fsm_display();
	  fsm_mode_run();
 8001182:	f7ff fa13 	bl	80005ac <fsm_mode_run>
 8001186:	e7fc      	b.n	8001182 <main+0x4e>
 8001188:	200000bc 	.word	0x200000bc

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b090      	sub	sp, #64	; 0x40
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	2228      	movs	r2, #40	; 0x28
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 f82c 	bl	80031f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b6:	2310      	movs	r3, #16
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011be:	2300      	movs	r3, #0
 80011c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011c2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 feff 	bl	8001fd0 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011d8:	f000 f932 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 f96c 	bl	80024d4 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001202:	f000 f91d 	bl	8001440 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3740      	adds	r7, #64	; 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_TIM2_Init+0x94>)
 800122e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001232:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001236:	2207      	movs	r2, #7
 8001238:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM2_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001242:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001246:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_TIM2_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001254:	4813      	ldr	r0, [pc, #76]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001256:	f001 fad5 	bl	8002804 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001260:	f000 f8ee 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <MX_TIM2_Init+0x94>)
 8001272:	f001 fc71 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800127c:	f000 f8e0 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_TIM2_Init+0x94>)
 800128e:	f001 fe43 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001298:	f000 f8d2 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000bc 	.word	0x200000bc

080012a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART2_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f001 fe8a 	bl	8002ff8 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 f8a9 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000104 	.word	0x20000104
 80012f8:	40004400 	.word	0x40004400

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <MX_GPIO_Init+0x114>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <MX_GPIO_Init+0x114>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <MX_GPIO_Init+0x114>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <MX_GPIO_Init+0x114>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a38      	ldr	r2, [pc, #224]	; (8001410 <MX_GPIO_Init+0x114>)
 800132e:	f043 0320 	orr.w	r3, r3, #32
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <MX_GPIO_Init+0x114>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <MX_GPIO_Init+0x114>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <MX_GPIO_Init+0x114>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <MX_GPIO_Init+0x114>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <MX_GPIO_Init+0x114>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a2c      	ldr	r2, [pc, #176]	; (8001410 <MX_GPIO_Init+0x114>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_GPIO_Init+0x114>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_9_Pin|LED_8_Pin|LED_7_Pin|LED_4_Pin
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001376:	4827      	ldr	r0, [pc, #156]	; (8001414 <MX_GPIO_Init+0x118>)
 8001378:	f000 fdef 	bl	8001f5a <HAL_GPIO_WritePin>
                          |LED_5_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_3_Pin|LED_2_Pin|LED_6_Pin
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 715e 	mov.w	r1, #888	; 0x378
 8001382:	4825      	ldr	r0, [pc, #148]	; (8001418 <MX_GPIO_Init+0x11c>)
 8001384:	f000 fde9 	bl	8001f5a <HAL_GPIO_WritePin>
                          |LED_11_Pin|LED_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_GPIO_Init+0x120>)
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	4820      	ldr	r0, [pc, #128]	; (8001420 <MX_GPIO_Init+0x124>)
 800139e:	f000 fc41 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_Pin DOWN_Pin MODE_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|MODE_Pin;
 80013a2:	2313      	movs	r3, #19
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	4817      	ldr	r0, [pc, #92]	; (8001414 <MX_GPIO_Init+0x118>)
 80013b6:	f000 fc35 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_9_Pin LED_8_Pin LED_7_Pin LED_4_Pin
                           LED_5_Pin LED_0_Pin */
  GPIO_InitStruct.Pin = LED_9_Pin|LED_8_Pin|LED_7_Pin|LED_4_Pin
 80013ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013be:	613b      	str	r3, [r7, #16]
                          |LED_5_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <MX_GPIO_Init+0x118>)
 80013d4:	f000 fc26 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_3_Pin LED_2_Pin LED_6_Pin
                           LED_11_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_3_Pin|LED_2_Pin|LED_6_Pin
 80013d8:	f44f 735e 	mov.w	r3, #888	; 0x378
 80013dc:	613b      	str	r3, [r7, #16]
                          |LED_11_Pin|LED_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <MX_GPIO_Init+0x11c>)
 80013f2:	f000 fc17 	bl	8001c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2028      	movs	r0, #40	; 0x28
 80013fc:	f000 fbdb 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001400:	2028      	movs	r0, #40	; 0x28
 8001402:	f000 fbf4 	bl	8001bee <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800
 8001418:	40010c00 	.word	0x40010c00
 800141c:	10110000 	.word	0x10110000
 8001420:	40011000 	.word	0x40011000

08001424 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	button_reading();
 800142c:	f7ff fa86 	bl	800093c <button_reading>
	timerRun();
 8001430:	f000 f8fc 	bl	800162c <timerRun>
	getKeyInput();
 8001434:	f7fe fe8a 	bl	800014c <getKeyInput>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <clearTimer1+0x18>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <clearTimer1+0x1c>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000168 	.word	0x20000168
 8001468:	2000014c 	.word	0x2000014c

0800146c <clearTimer2>:
void clearTimer2(){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <clearTimer2+0x18>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <clearTimer2+0x1c>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	2000016c 	.word	0x2000016c
 8001488:	20000150 	.word	0x20000150

0800148c <clearTimer3>:
void clearTimer3(){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <clearTimer3+0x18>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <clearTimer3+0x1c>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000170 	.word	0x20000170
 80014a8:	20000154 	.word	0x20000154

080014ac <isTimerFlag1>:
		return 1;
	}
	return 0;
}

int isTimerFlag1(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <isTimerFlag1+0x20>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d104      	bne.n	80014c2 <isTimerFlag1+0x16>
		timer1_flag = 0;
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <isTimerFlag1+0x20>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
		return 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <isTimerFlag1+0x18>
	}
	return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	2000014c 	.word	0x2000014c

080014d0 <isTimerFlag2>:

int isTimerFlag2(){
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <isTimerFlag2+0x20>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d104      	bne.n	80014e6 <isTimerFlag2+0x16>
		timer2_flag = 0;
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <isTimerFlag2+0x20>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
		return 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <isTimerFlag2+0x18>
	}
	return 0;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000150 	.word	0x20000150

080014f4 <setTimer1>:
}
void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <setTimer1+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	fb92 f3f3 	sdiv	r3, r2, r3
 8001506:	4a06      	ldr	r2, [pc, #24]	; (8001520 <setTimer1+0x2c>)
 8001508:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <setTimer1+0x30>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000044 	.word	0x20000044
 8001520:	20000168 	.word	0x20000168
 8001524:	2000014c 	.word	0x2000014c

08001528 <setTimer2>:

void setTimer2( int duration){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <setTimer2+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	fb92 f3f3 	sdiv	r3, r2, r3
 800153a:	4a06      	ldr	r2, [pc, #24]	; (8001554 <setTimer2+0x2c>)
 800153c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <setTimer2+0x30>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000044 	.word	0x20000044
 8001554:	2000016c 	.word	0x2000016c
 8001558:	20000150 	.word	0x20000150

0800155c <setTimer3>:

void setTimer3( int duration){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <setTimer3+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	fb92 f3f3 	sdiv	r3, r2, r3
 800156e:	4a06      	ldr	r2, [pc, #24]	; (8001588 <setTimer3+0x2c>)
 8001570:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <setTimer3+0x30>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000044 	.word	0x20000044
 8001588:	20000170 	.word	0x20000170
 800158c:	20000154 	.word	0x20000154

08001590 <setTimer4>:

void setTimer4( int duration){
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <setTimer4+0x28>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	fb92 f3f3 	sdiv	r3, r2, r3
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <setTimer4+0x2c>)
 80015a4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <setTimer4+0x30>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000044 	.word	0x20000044
 80015bc:	20000174 	.word	0x20000174
 80015c0:	20000158 	.word	0x20000158

080015c4 <setTimer5>:

void setTimer5( int duration){
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <setTimer5+0x28>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <setTimer5+0x2c>)
 80015d8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <setTimer5+0x30>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000044 	.word	0x20000044
 80015f0:	20000178 	.word	0x20000178
 80015f4:	2000015c 	.word	0x2000015c

080015f8 <setTimer6>:
void setTimer6( int duration){
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <setTimer6+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	fb92 f3f3 	sdiv	r3, r2, r3
 800160a:	4a06      	ldr	r2, [pc, #24]	; (8001624 <setTimer6+0x2c>)
 800160c:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <setTimer6+0x30>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000044 	.word	0x20000044
 8001624:	2000017c 	.word	0x2000017c
 8001628:	20000160 	.word	0x20000160

0800162c <timerRun>:

void timerRun (){
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <timerRun+0xec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd0b      	ble.n	8001650 <timerRun+0x24>
		timer0_counter --;
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <timerRun+0xec>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	4a36      	ldr	r2, [pc, #216]	; (8001718 <timerRun+0xec>)
 8001640:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <timerRun+0xec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dc02      	bgt.n	8001650 <timerRun+0x24>
			timer0_flag = 1;
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <timerRun+0xf0>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <timerRun+0xf4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd0b      	ble.n	8001670 <timerRun+0x44>
		timer1_counter--;
 8001658:	4b31      	ldr	r3, [pc, #196]	; (8001720 <timerRun+0xf4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a30      	ldr	r2, [pc, #192]	; (8001720 <timerRun+0xf4>)
 8001660:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <timerRun+0xf4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dc02      	bgt.n	8001670 <timerRun+0x44>
			timer1_flag = 1;
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <timerRun+0xf8>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <timerRun+0xfc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dd0b      	ble.n	8001690 <timerRun+0x64>
		timer2_counter--;
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <timerRun+0xfc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <timerRun+0xfc>)
 8001680:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <timerRun+0xfc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dc02      	bgt.n	8001690 <timerRun+0x64>
			timer2_flag = 1;
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <timerRun+0x100>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <timerRun+0x104>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd0b      	ble.n	80016b0 <timerRun+0x84>
		timer3_counter--;
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <timerRun+0x104>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <timerRun+0x104>)
 80016a0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <timerRun+0x104>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc02      	bgt.n	80016b0 <timerRun+0x84>
			timer3_flag = 1;
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <timerRun+0x108>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <timerRun+0x10c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dd0b      	ble.n	80016d0 <timerRun+0xa4>
		timer4_counter--;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <timerRun+0x10c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <timerRun+0x10c>)
 80016c0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <timerRun+0x10c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dc02      	bgt.n	80016d0 <timerRun+0xa4>
			timer4_flag = 1;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <timerRun+0x110>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <timerRun+0x114>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	dd0b      	ble.n	80016f0 <timerRun+0xc4>
			timer5_counter--;
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <timerRun+0x114>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	4a18      	ldr	r2, [pc, #96]	; (8001740 <timerRun+0x114>)
 80016e0:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <timerRun+0x114>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	dc02      	bgt.n	80016f0 <timerRun+0xc4>
				timer5_flag = 1;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <timerRun+0x118>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <timerRun+0x11c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd0b      	ble.n	8001710 <timerRun+0xe4>
			timer6_counter--;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <timerRun+0x11c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <timerRun+0x11c>)
 8001700:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <timerRun+0x11c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	dc02      	bgt.n	8001710 <timerRun+0xe4>
				timer6_flag = 1;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <timerRun+0x120>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	20000164 	.word	0x20000164
 800171c:	20000148 	.word	0x20000148
 8001720:	20000168 	.word	0x20000168
 8001724:	2000014c 	.word	0x2000014c
 8001728:	2000016c 	.word	0x2000016c
 800172c:	20000150 	.word	0x20000150
 8001730:	20000170 	.word	0x20000170
 8001734:	20000154 	.word	0x20000154
 8001738:	20000174 	.word	0x20000174
 800173c:	20000158 	.word	0x20000158
 8001740:	20000178 	.word	0x20000178
 8001744:	2000015c 	.word	0x2000015c
 8001748:	2000017c 	.word	0x2000017c
 800174c:	20000160 	.word	0x20000160

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c4:	d113      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_TIM_Base_MspInit+0x44>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_TIM_Base_MspInit+0x44>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	201c      	movs	r0, #28
 80017e4:	f000 f9e7 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e8:	201c      	movs	r0, #28
 80017ea:	f000 fa00 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_UART_MspInit+0x70>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d123      	bne.n	8001864 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x74>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	4a13      	ldr	r2, [pc, #76]	; (8001870 <HAL_UART_MspInit+0x74>)
 8001822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001826:	61d3      	str	r3, [r2, #28]
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_UART_MspInit+0x74>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_UART_MspInit+0x74>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_UART_MspInit+0x74>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_UART_MspInit+0x74>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800184c:	230c      	movs	r3, #12
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2302      	movs	r3, #2
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_UART_MspInit+0x78>)
 8001860:	f000 f9e0 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004400 	.word	0x40004400
 8001870:	40021000 	.word	0x40021000
 8001874:	40010800 	.word	0x40010800

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 f887 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM2_IRQHandler+0x10>)
 80018ce:	f001 f83b 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200000bc 	.word	0x200000bc

080018dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018e4:	f000 fb52 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191e:	f7ff ffe5 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f001 fc45 	bl	80031b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001926:	f7ff fc05 	bl	8001134 <main>
  bx lr
 800192a:	4770      	bx	lr
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001934:	08003250 	.word	0x08003250
  ldr r2, =_sbss
 8001938:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800193c:	20000184 	.word	0x20000184

08001940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_2_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x28>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x28>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 f923 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fef6 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f93b 	bl	8001c0a <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 f903 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000048 	.word	0x20000048
 80019c8:	20000050 	.word	0x20000050
 80019cc:	2000004c 	.word	0x2000004c

080019d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x1c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_IncTick+0x20>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_IncTick+0x20>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000050 	.word	0x20000050
 80019f0:	20000180 	.word	0x20000180

080019f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_GetTick+0x10>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000180 	.word	0x20000180

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <__NVIC_EnableIRQ+0x34>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff90 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff2d 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff42 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff90 	bl	8001af8 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff35 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b08b      	sub	sp, #44	; 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e169      	b.n	8001f0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8158 	bne.w	8001f06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a9a      	ldr	r2, [pc, #616]	; (8001ec4 <HAL_GPIO_Init+0x2a0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d05e      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c60:	4a98      	ldr	r2, [pc, #608]	; (8001ec4 <HAL_GPIO_Init+0x2a0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d875      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c66:	4a98      	ldr	r2, [pc, #608]	; (8001ec8 <HAL_GPIO_Init+0x2a4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d058      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c6c:	4a96      	ldr	r2, [pc, #600]	; (8001ec8 <HAL_GPIO_Init+0x2a4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d86f      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c72:	4a96      	ldr	r2, [pc, #600]	; (8001ecc <HAL_GPIO_Init+0x2a8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d052      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c78:	4a94      	ldr	r2, [pc, #592]	; (8001ecc <HAL_GPIO_Init+0x2a8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d869      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c7e:	4a94      	ldr	r2, [pc, #592]	; (8001ed0 <HAL_GPIO_Init+0x2ac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d04c      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c84:	4a92      	ldr	r2, [pc, #584]	; (8001ed0 <HAL_GPIO_Init+0x2ac>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d863      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c8a:	4a92      	ldr	r2, [pc, #584]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d046      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c90:	4a90      	ldr	r2, [pc, #576]	; (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d85d      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c96:	2b12      	cmp	r3, #18
 8001c98:	d82a      	bhi.n	8001cf0 <HAL_GPIO_Init+0xcc>
 8001c9a:	2b12      	cmp	r3, #18
 8001c9c:	d859      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <HAL_GPIO_Init+0x80>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001d1f 	.word	0x08001d1f
 8001ca8:	08001cf9 	.word	0x08001cf9
 8001cac:	08001d0b 	.word	0x08001d0b
 8001cb0:	08001d4d 	.word	0x08001d4d
 8001cb4:	08001d53 	.word	0x08001d53
 8001cb8:	08001d53 	.word	0x08001d53
 8001cbc:	08001d53 	.word	0x08001d53
 8001cc0:	08001d53 	.word	0x08001d53
 8001cc4:	08001d53 	.word	0x08001d53
 8001cc8:	08001d53 	.word	0x08001d53
 8001ccc:	08001d53 	.word	0x08001d53
 8001cd0:	08001d53 	.word	0x08001d53
 8001cd4:	08001d53 	.word	0x08001d53
 8001cd8:	08001d53 	.word	0x08001d53
 8001cdc:	08001d53 	.word	0x08001d53
 8001ce0:	08001d53 	.word	0x08001d53
 8001ce4:	08001d53 	.word	0x08001d53
 8001ce8:	08001d01 	.word	0x08001d01
 8001cec:	08001d15 	.word	0x08001d15
 8001cf0:	4a79      	ldr	r2, [pc, #484]	; (8001ed8 <HAL_GPIO_Init+0x2b4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cf6:	e02c      	b.n	8001d52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e029      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e024      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	3308      	adds	r3, #8
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e01f      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	330c      	adds	r3, #12
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e01a      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d26:	2304      	movs	r3, #4
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e013      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	611a      	str	r2, [r3, #16]
          break;
 8001d3e:	e009      	b.n	8001d54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d40:	2308      	movs	r3, #8
 8001d42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	615a      	str	r2, [r3, #20]
          break;
 8001d4a:	e003      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          break;
 8001d52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2bff      	cmp	r3, #255	; 0xff
 8001d58:	d801      	bhi.n	8001d5e <HAL_GPIO_Init+0x13a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_Init+0x13e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3304      	adds	r3, #4
 8001d62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2bff      	cmp	r3, #255	; 0xff
 8001d68:	d802      	bhi.n	8001d70 <HAL_GPIO_Init+0x14c>
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x152>
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	3b08      	subs	r3, #8
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	6a39      	ldr	r1, [r7, #32]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	431a      	orrs	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80b1 	beq.w	8001f06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001da4:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <HAL_GPIO_Init+0x2b8>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	; (8001edc <HAL_GPIO_Init+0x2b8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <HAL_GPIO_Init+0x2b8>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dbc:	4a48      	ldr	r2, [pc, #288]	; (8001ee0 <HAL_GPIO_Init+0x2bc>)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <HAL_GPIO_Init+0x2c0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_GPIO_Init+0x1ec>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3f      	ldr	r2, [pc, #252]	; (8001ee8 <HAL_GPIO_Init+0x2c4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00d      	beq.n	8001e0c <HAL_GPIO_Init+0x1e8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3e      	ldr	r2, [pc, #248]	; (8001eec <HAL_GPIO_Init+0x2c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0x1e4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3d      	ldr	r2, [pc, #244]	; (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_GPIO_Init+0x1e0>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e004      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e10:	2300      	movs	r3, #0
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e22:	492f      	ldr	r1, [pc, #188]	; (8001ee0 <HAL_GPIO_Init+0x2bc>)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	492c      	ldr	r1, [pc, #176]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4928      	ldr	r1, [pc, #160]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4922      	ldr	r1, [pc, #136]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	491e      	ldr	r1, [pc, #120]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4918      	ldr	r1, [pc, #96]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4914      	ldr	r1, [pc, #80]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d021      	beq.n	8001ef8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
 8001ec0:	e021      	b.n	8001f06 <HAL_GPIO_Init+0x2e2>
 8001ec2:	bf00      	nop
 8001ec4:	10320000 	.word	0x10320000
 8001ec8:	10310000 	.word	0x10310000
 8001ecc:	10220000 	.word	0x10220000
 8001ed0:	10210000 	.word	0x10210000
 8001ed4:	10120000 	.word	0x10120000
 8001ed8:	10110000 	.word	0x10110000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40010800 	.word	0x40010800
 8001ee8:	40010c00 	.word	0x40010c00
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40011400 	.word	0x40011400
 8001ef4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	4909      	ldr	r1, [pc, #36]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	3301      	adds	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f ae8e 	bne.w	8001c38 <HAL_GPIO_Init+0x14>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	372c      	adds	r7, #44	; 0x2c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40010400 	.word	0x40010400

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	807b      	strh	r3, [r7, #2]
 8001f66:	4613      	mov	r3, r2
 8001f68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6a:	787b      	ldrb	r3, [r7, #1]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f76:	e003      	b.n	8001f80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f806 	bl	8001fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e272      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff0:	4b92      	ldr	r3, [pc, #584]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d00c      	beq.n	8002016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ffc:	4b8f      	ldr	r3, [pc, #572]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d112      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d10b      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d06c      	beq.n	80020fc <HAL_RCC_OscConfig+0x12c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d168      	bne.n	80020fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e24c      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x76>
 8002038:	4b80      	ldr	r3, [pc, #512]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a7f      	ldr	r2, [pc, #508]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x98>
 800204e:	4b7b      	ldr	r3, [pc, #492]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7a      	ldr	r2, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b78      	ldr	r3, [pc, #480]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a77      	ldr	r2, [pc, #476]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0xbc>
 8002072:	4b72      	ldr	r3, [pc, #456]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a71      	ldr	r2, [pc, #452]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6e      	ldr	r2, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a67      	ldr	r2, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fca2 	bl	80019f4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fc9e 	bl	80019f4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e200      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe4>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc8e 	bl	80019f4 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fc8a 	bl	80019f4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1ec      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x10c>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210a:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1c0      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4939      	ldr	r1, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	e03a      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff fc43 	bl	80019f4 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fc3f 	bl	80019f4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1a1      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4927      	ldr	r1, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc22 	bl	80019f4 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff fc1e 	bl	80019f4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e180      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d03a      	beq.n	8002254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d019      	beq.n	800221a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7ff fc02 	bl	80019f4 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff fbfe 	bl	80019f4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e160      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f000 fad8 	bl	80027c8 <RCC_Delay>
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7ff fbe8 	bl	80019f4 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002226:	e00f      	b.n	8002248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fbe4 	bl	80019f4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d908      	bls.n	8002248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e146      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	42420000 	.word	0x42420000
 8002244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b92      	ldr	r3, [pc, #584]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e9      	bne.n	8002228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a6 	beq.w	80023ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b8b      	ldr	r3, [pc, #556]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b88      	ldr	r3, [pc, #544]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a87      	ldr	r2, [pc, #540]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b82      	ldr	r3, [pc, #520]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7e      	ldr	r2, [pc, #504]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7ff fba5 	bl	80019f4 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ae:	f7ff fba1 	bl	80019f4 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e103      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x312>
 80022d4:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	e02d      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x334>
 80022ea:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a66      	ldr	r2, [pc, #408]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
 8002302:	e01c      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x356>
 800230c:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a60      	ldr	r2, [pc, #384]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a5d      	ldr	r2, [pc, #372]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002326:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b58      	ldr	r3, [pc, #352]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a57      	ldr	r2, [pc, #348]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d015      	beq.n	8002372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff fb55 	bl	80019f4 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7ff fb51 	bl	80019f4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0b1      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ee      	beq.n	800234e <HAL_RCC_OscConfig+0x37e>
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7ff fb3f 	bl	80019f4 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7ff fb3b 	bl	80019f4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e09b      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	4b40      	ldr	r3, [pc, #256]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a3b      	ldr	r2, [pc, #236]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8087 	beq.w	80024c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d061      	beq.n	8002488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d146      	bne.n	800245a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7ff fb0f 	bl	80019f4 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7ff fb0b 	bl	80019f4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e06d      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4921      	ldr	r1, [pc, #132]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a19      	ldr	r1, [r3, #32]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	430b      	orrs	r3, r1
 8002426:	491b      	ldr	r1, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff fadf 	bl	80019f4 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff fadb 	bl	80019f4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e03d      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x46a>
 8002458:	e035      	b.n	80024c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fac8 	bl	80019f4 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7ff fac4 	bl	80019f4 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e026      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x498>
 8002486:	e01e      	b.n	80024c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e019      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
 8002494:	40021000 	.word	0x40021000
 8002498:	40007000 	.word	0x40007000
 800249c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x500>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d0      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d910      	bls.n	8002518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	4965      	ldr	r1, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b8      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800253a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d040      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d115      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07f      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e073      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06b      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4936      	ldr	r1, [pc, #216]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c4:	f7ff fa16 	bl	80019f4 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7ff fa12 	bl	80019f4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e053      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d210      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4922      	ldr	r1, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e032      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002662:	f000 f821 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002666:	4602      	mov	r2, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	5ccb      	ldrb	r3, [r1, r3]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1cc>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f974 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40022000 	.word	0x40022000
 8002698:	40021000 	.word	0x40021000
 800269c:	08003230 	.word	0x08003230
 80026a0:	20000048 	.word	0x20000048
 80026a4:	2000004c 	.word	0x2000004c

080026a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b490      	push	{r4, r7}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_RCC_GetSysClockFreq+0xac>)
 80026b0:	1d3c      	adds	r4, r7, #4
 80026b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b8:	f240 2301 	movw	r3, #513	; 0x201
 80026bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d002      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x40>
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d003      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x46>
 80026e6:	e02b      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ea:	623b      	str	r3, [r7, #32]
      break;
 80026ec:	e02b      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	0c9b      	lsrs	r3, r3, #18
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3328      	adds	r3, #40	; 0x28
 80026f8:	443b      	add	r3, r7
 80026fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb0>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0c5b      	lsrs	r3, r3, #17
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	3328      	adds	r3, #40	; 0x28
 8002716:	443b      	add	r3, r7
 8002718:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800271c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002722:	fb03 f202 	mul.w	r2, r3, r2
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	e004      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	623b      	str	r3, [r7, #32]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6a3b      	ldr	r3, [r7, #32]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc90      	pop	{r4, r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	08003220 	.word	0x08003220
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	003d0900 	.word	0x003d0900

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_RCC_GetHCLKFreq+0x10>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000048 	.word	0x20000048

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff2 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	08003240 	.word	0x08003240

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffde 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08003240 	.word	0x08003240

080027c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <RCC_Delay+0x34>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <RCC_Delay+0x38>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0a5b      	lsrs	r3, r3, #9
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e4:	bf00      	nop
  }
  while (Delay --);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	60fa      	str	r2, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f9      	bne.n	80027e4 <RCC_Delay+0x1c>
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	20000048 	.word	0x20000048
 8002800:	10624dd3 	.word	0x10624dd3

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e041      	b.n	800289a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe ffc2 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 fa70 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d001      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e03a      	b.n	8002932 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_TIM_Base_Start_IT+0x98>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00e      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x58>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d009      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x58>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d004      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x58>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_TIM_Base_Start_IT+0xa0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d111      	bne.n	8002920 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b06      	cmp	r3, #6
 800290c:	d010      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291e:	e007      	b.n	8002930 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800

08002948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0202 	mvn.w	r2, #2
 8002974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f9b1 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9a4 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f9b3 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0204 	mvn.w	r2, #4
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f987 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f97a 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f989 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0208 	mvn.w	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f95d 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f950 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f95f 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0210 	mvn.w	r2, #16
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2208      	movs	r2, #8
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f933 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f926 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f935 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0201 	mvn.w	r2, #1
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fcac 	bl	8001424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa77 	bl	8002fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8f9 	bl	8002d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0220 	mvn.w	r2, #32
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa42 	bl	8002fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0b3      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x180>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba8:	d03e      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xd0>
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	f200 8087 	bhi.w	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	f000 8085 	beq.w	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	d87f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d01a      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xa2>
 8002bc4:	2b70      	cmp	r3, #112	; 0x70
 8002bc6:	d87b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d050      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x116>
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d877      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d03c      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xf6>
 8002bd4:	2b50      	cmp	r3, #80	; 0x50
 8002bd6:	d873      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d058      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x136>
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d86f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d064      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002be4:	2b30      	cmp	r3, #48	; 0x30
 8002be6:	d86b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d060      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d867      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d05a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bf8:	e062      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f000 f966 	bl	8002eda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	609a      	str	r2, [r3, #8]
      break;
 8002c26:	e04e      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f000 f94f 	bl	8002eda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e03b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 f8c6 	bl	8002dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2150      	movs	r1, #80	; 0x50
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f91d 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e02b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f8e4 	bl	8002e48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2160      	movs	r1, #96	; 0x60
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f90d 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e01b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f8a6 	bl	8002dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f8fd 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e00b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4610      	mov	r0, r2
 8002cba:	f000 f8f4 	bl	8002ea6 <TIM_ITRx_SetConfig>
        break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <TIM_Base_SetConfig+0xbc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d007      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <TIM_Base_SetConfig+0xbc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	615a      	str	r2, [r3, #20]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800

08002dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0201 	bic.w	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 030a 	bic.w	r3, r3, #10
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 0210 	bic.w	r2, r3, #16
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	031b      	lsls	r3, r3, #12
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	621a      	str	r2, [r3, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f043 0307 	orr.w	r3, r3, #7
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	021a      	lsls	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e046      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e03f      	b.n	800308a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fbec 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f829 	bl	8003094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030ce:	f023 030c 	bic.w	r3, r3, #12
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	430b      	orrs	r3, r1
 80030da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <UART_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d103      	bne.n	8003104 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030fc:	f7ff fb50 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	e002      	b.n	800310a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7ff fb38 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8003108:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	0119      	lsls	r1, r3, #4
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <UART_SetConfig+0x118>)
 8003142:	fba3 0302 	umull	r0, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2064      	movs	r0, #100	; 0x64
 800314a:	fb00 f303 	mul.w	r3, r0, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	3332      	adds	r3, #50	; 0x32
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <UART_SetConfig+0x118>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003160:	4419      	add	r1, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fbb2 f2f3 	udiv	r2, r2, r3
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <UART_SetConfig+0x118>)
 800317a:	fba3 0302 	umull	r0, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2064      	movs	r0, #100	; 0x64
 8003182:	fb00 f303 	mul.w	r3, r0, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a07      	ldr	r2, [pc, #28]	; (80031ac <UART_SetConfig+0x118>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	440a      	add	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40013800 	.word	0x40013800
 80031ac:	51eb851f 	.word	0x51eb851f

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	2600      	movs	r6, #0
 80031b4:	4d0c      	ldr	r5, [pc, #48]	; (80031e8 <__libc_init_array+0x38>)
 80031b6:	4c0d      	ldr	r4, [pc, #52]	; (80031ec <__libc_init_array+0x3c>)
 80031b8:	1b64      	subs	r4, r4, r5
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	42a6      	cmp	r6, r4
 80031be:	d109      	bne.n	80031d4 <__libc_init_array+0x24>
 80031c0:	f000 f822 	bl	8003208 <_init>
 80031c4:	2600      	movs	r6, #0
 80031c6:	4d0a      	ldr	r5, [pc, #40]	; (80031f0 <__libc_init_array+0x40>)
 80031c8:	4c0a      	ldr	r4, [pc, #40]	; (80031f4 <__libc_init_array+0x44>)
 80031ca:	1b64      	subs	r4, r4, r5
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	d105      	bne.n	80031de <__libc_init_array+0x2e>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d8:	4798      	blx	r3
 80031da:	3601      	adds	r6, #1
 80031dc:	e7ee      	b.n	80031bc <__libc_init_array+0xc>
 80031de:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e2:	4798      	blx	r3
 80031e4:	3601      	adds	r6, #1
 80031e6:	e7f2      	b.n	80031ce <__libc_init_array+0x1e>
 80031e8:	08003248 	.word	0x08003248
 80031ec:	08003248 	.word	0x08003248
 80031f0:	08003248 	.word	0x08003248
 80031f4:	0800324c 	.word	0x0800324c

080031f8 <memset>:
 80031f8:	4603      	mov	r3, r0
 80031fa:	4402      	add	r2, r0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d100      	bne.n	8003202 <memset+0xa>
 8003200:	4770      	bx	lr
 8003202:	f803 1b01 	strb.w	r1, [r3], #1
 8003206:	e7f9      	b.n	80031fc <memset+0x4>

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
